<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>怎么理解js中函数是一等公民</title>
      <link href="/2023/04/c08ec216fed2/"/>
      <url>/2023/04/c08ec216fed2/</url>
      
        <content type="html"><![CDATA[<p>将函数视为“一等公民”（First-Class Citizens）意味着在JavaScript中，函数被视为与其他数据类型相同，可以像变量、对象和其他数据类型一样进行操作和使用。这种特性在编程语言中通常被称为“一等函数”或“函数作为一等公民”。以下是理解JavaScript中函数作为一等公民的几个关键点：</p><ol><li><p><strong>函数可以被赋值给变量</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中，一个函数袂被赋值给了变量<code>add</code>，从而可以像操作其他变量一样操作函数。</p></li><li><p><strong>函数可以作为参数传递</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="comment">// 在这里调用传递进来的函数</span></span><br><span class="line">  <span class="title function_">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Doing something...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以将函数直接传递给另一个函数，并在其中执行。</p></li><li><p><strong>函数可以作为返回值</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGreeter</span>(<span class="params">greeting</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> greetInEnglish = <span class="title function_">createGreeter</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="title function_">greetInEnglish</span>(<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>createGreeter</code>函数返回另一个函数，这个返回的函数在调用时打印相应的问候语，闭包就是这么实现的。</p></li><li><p><strong>函数可以存储在数据结构中</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functions = [<span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;, <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a - b; &#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(functions[<span class="number">0</span>](<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出 7</span></span><br></pre></td></tr></table></figure><p>在这个例子中，函数存储在数组中，并可以像其他数据一样进行访问和使用，当然这种用法比较少，因为不符合我们的编程习惯</p></li></ol><p>JavaScript中的函数是一等公民意味着函数在语言中具有与其他数据类型相同的地位，可以自由地赋值、传递、返回和存储。这种特性使得JavaScript可以以更灵活的方式编写代码，并支持函数式编程的范式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang内存逃逸分析</title>
      <link href="/2023/02/5d929965c0ba/"/>
      <url>/2023/02/5d929965c0ba/</url>
      
        <content type="html"><![CDATA[<p>当编写代码时，Golang 编译器会进行内存逃逸分析，以确定是否将变量分配在堆上。</p><ol><li><strong>函数返回了指针类型</strong>：引发的逃逸分析：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createUser</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> *User &#123;</span><br><span class="line">u := User&#123;Name: name, Age: age&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;u <span class="comment">// 返回局部变量的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">name := <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age := <span class="number">30</span></span><br><span class="line">user := createUser(name, age)</span><br><span class="line">_ = user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在这个示例中，<code>createUser</code> 函数返回了指向局部变量 <code>u</code> 的指针。由于返回的指针可能在 <code>createUser</code> 函数返回后仍然被引用，因此编译器会进行内存逃逸分析，将 <code>u</code> 分配在堆上，以避免在 <code>createUser</code> 函数返回后造成使用已释放栈内存的情况。</p><ol start="2"><li><strong>闭包捕获局部变量的指针</strong>：在闭包中捕获局部变量的指针可能导致内存逃逸。示例代码如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">age := <span class="number">30</span></span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">_ = add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，闭包<code>add</code>捕获了局部变量<code>age</code>的指针，这会导致<code>age</code>逃逸到堆上。</p><ol start="3"><li><strong>将指针传递到函数或方法中</strong>：当将局部变量的指针传递给函数或方法，并且函数或方法可能会持有该指针时，这也会导致内存逃逸。示例代码如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(u *User)</span></span> &#123;</span><br><span class="line">u.Age++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user := User&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>&#125;</span><br><span class="line">updateUser(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>updateUser</code> 函数接收了 <code>User</code> 类型的指针，这有可能导致逃逸。</p><ol start="3"><li><strong>接口类型的逃逸</strong>：使用接口类型时，编译器可能无法确定实际的类型，导致变量逃逸。示例代码如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">u := User&#123;Name: <span class="string">&quot;Bob&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line">x = u</span><br><span class="line">_ = x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，变量 <code>x</code> 的类型为接口，可能会导致内存逃逸的发生。</p><p>总结： 为了查看内存逃逸分析的结果，你可以使用 <code>-gcflags=&#39;-m&#39;</code> 参数来编译该示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -gcflags=<span class="string">&#x27;-m&#x27;</span> your_file_name.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node和Golang使用rpc互相通信</title>
      <link href="/2023/01/bb940bc2e721/"/>
      <url>/2023/01/bb940bc2e721/</url>
      
        <content type="html"><![CDATA[<p>RPC通信是和语言无关的，简单做个例子试一下</p><h3 id="Node-js中作为RPC-Server，Golang中作为RPC-Client"><a href="#Node-js中作为RPC-Server，Golang中作为RPC-Client" class="headerlink" title="Node.js中作为RPC Server，Golang中作为RPC Client"></a>Node.js中作为RPC Server，Golang中作为RPC Client</h3><h4 id="Node-js中作为RPC-Server"><a href="#Node-js中作为RPC-Server" class="headerlink" title="Node.js中作为RPC Server"></a>Node.js中作为RPC Server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zerorpc = <span class="built_in">require</span>(<span class="string">&quot;zerorpc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> zerorpc.<span class="title class_">Server</span>(&#123;</span><br><span class="line">   <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params">name, reply</span>) &#123;</span><br><span class="line">       <span class="title function_">reply</span>(<span class="literal">null</span>, <span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">bind</span>(<span class="string">&quot;tcp://0.0.0.0:4242&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="在Golang中作为RPC-Client"><a href="#在Golang中作为RPC-Client" class="headerlink" title="在Golang中作为RPC Client"></a>在Golang中作为RPC Client</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class="line">   <span class="string">&quot;net&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">   Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   client, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:4242&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(<span class="string">&quot;dialing:&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> reply <span class="type">string</span></span><br><span class="line">   args := &amp;Args&#123;<span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line">   c := jsonrpc.NewClient(client)</span><br><span class="line">   err = c.Call(<span class="string">&quot;greet&quot;</span>, args, &amp;reply)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(<span class="string">&quot;arith error:&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Golang中作为RPC-Server，Node-js中作为RPC-Client"><a href="#Golang中作为RPC-Server，Node-js中作为RPC-Client" class="headerlink" title="Golang中作为RPC Server，Node.js中作为RPC Client"></a>Golang中作为RPC Server，Node.js中作为RPC Client</h3><h4 id="Golang中作为RPC-Server"><a href="#Golang中作为RPC-Server" class="headerlink" title="Golang中作为RPC Server"></a>Golang中作为RPC Server</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;net&quot;</span></span><br><span class="line">   <span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GreetService)</span></span> Greet(name <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">   *reply = <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   greet := <span class="built_in">new</span>(GreetService)</span><br><span class="line">   rpc.Register(greet)</span><br><span class="line">   listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(<span class="string">&quot;listen error:&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">       conn, err := listener.Accept()</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">continue</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">go</span> rpc.ServeCodec(jsonrpc.NewServerCodec(conn))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Node-js中作为RPC-Client"><a href="#Node-js中作为RPC-Client" class="headerlink" title="Node.js中作为RPC Client"></a>Node.js中作为RPC Client</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zerorpc = <span class="built_in">require</span>(<span class="string">&quot;zerorpc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> zerorpc.<span class="title class_">Client</span>();</span><br><span class="line">client.<span class="title function_">connect</span>(<span class="string">&quot;tcp://127.0.0.1:1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">client.<span class="title function_">invoke</span>(<span class="string">&quot;greet&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="keyword">function</span> (<span class="params">error, res, more</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的作用域，以及js为什么需要绑定this</title>
      <link href="/2022/12/f2ae2a403256/"/>
      <url>/2022/12/f2ae2a403256/</url>
      
        <content type="html"><![CDATA[<p>JavaScript有两种主要的作用域：全局作用域和局部作用域。全局作用域是代码中任何地方都可以访问的范围，而局部作用域是指仅在特定代码块内部可见的范围。JavaScript在设计上需要绑定<code>this</code>关键字是因为其函数作用域和对象导向的特性。</p><h3 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h3><ul><li><p>**全局作用域(Global Scope)**：全局作用域中声明的变量和函数可以被整个代码访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVariable = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可以访问globalVariable</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(globalVariable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**局部作用域(Local Scope)**：局部作用域中声明的变量和函数只能在其声明的代码块内部访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">localFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> localVariable = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 只能在localFunction内部访问localVariable</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(localVariable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>JavaScript的作用域是通过函数来创建的，每个函数都有自己的作用域，这样可以隔离变量，避免命名冲突和数据混乱。</p><h3 id="绑定this"><a href="#绑定this" class="headerlink" title="绑定this"></a>绑定this</h3><p>JavaScript中的<code>this</code>关键字在不同的情况下指向不同的值，它可以指向调用它的对象，也可以通过显示绑定来指向指定的对象。绑定<code>this</code>的主要原因是 JavaScript 是一门多范式的语言，可以同时支持面向对象编程、函数式编程等多种范式。在不同的编程范式中，对<code>this</code>的使用和指向有不同的约定和规则。</p><ul><li><p><strong>面向对象编程</strong>：在使用类、对象和原型继承构建对象时，需要通过<code>this</code>关键字来引用对象的属性和方法。</p></li><li><p><strong>函数式编程</strong>：在函数式编程范式中，需要让函数能够在不同的上下文中正确地执行，因此需要对<code>this</code>进行正确的绑定，以确保它在函数内部指向预期的值。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的分布式锁：Redis</title>
      <link href="/2022/11/300722230009/"/>
      <url>/2022/11/300722230009/</url>
      
        <content type="html"><![CDATA[<p>微服务架构下，经常会碰到多个API对一个资源的访问，这个时候传统的锁就不管用了，分布式锁就应运而生。<br>在Redis中实现分布式锁通常使用SET命令和DEL命令来实现锁的设置和自动释放</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个Redis客户端实例</span></span><br><span class="line">client := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>, <span class="comment">// 没有设置密码</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// 使用默认数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置锁的键名</span></span><br><span class="line">lockKey := <span class="string">&quot;my_lock&quot;</span></span><br><span class="line"><span class="comment">// 设置锁的过期时间，防止锁无法释放</span></span><br><span class="line">lockTTL := <span class="number">10</span> * time.Second</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试获取锁</span></span><br><span class="line">lockAcquired, err := client.SetNX(ctx, lockKey, <span class="string">&quot;locked&quot;</span>, lockTTL).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lockAcquired &#123;</span><br><span class="line"><span class="comment">// 成功获取锁，执行业务逻辑</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Lock acquired, running the critical section&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟业务执行</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line">_, err := client.Del(ctx, lockKey).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Lock released&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 未能获取锁</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Failed to acquire lock&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码尝试获取一个名为<code>my_lock</code>的锁。我们使用<code>SETNX</code>命令来设置锁，其原子性保证了只有一个客户端能获得锁。锁设置了10秒的过期时间，避免锁无法释放。如果成功获得了锁，则执行一些关键逻辑，最后再使用<code>DEL</code>命令来释放锁。如果未能获得锁，则处理相应逻辑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express的应用和服务分离</title>
      <link href="/2022/10/56df050d5428/"/>
      <url>/2022/10/56df050d5428/</url>
      
        <content type="html"><![CDATA[<p>在一个 Express 应用中，将应用程序和服务器逻辑分离开来通常是个好主意。具体来说，可以将 Express 应用本身（包括路由、中间件配置等）和服务器逻辑（创建服务器实例、侦听端口等）分开。</p><p>这种分离可以通过以下方法实现：</p><ol><li><p><strong>应用程序</strong>：</p><ul><li>应用程序逻辑可以包括 Express 应用的配置、路由设置、中间件配置等内容。这些逻辑通常保存在主应用文件（例如 <code>app.js</code>）中。应用程序处理请求、调用相应的路由处理程序以及执行其他应用级逻辑。</li></ul></li><li><p><strong>服务器逻辑</strong>：</p><ul><li>服务器逻辑涉及创建 HTTP 服务器实例、指定监听端口等。将这些逻辑放在单独的文件中，通常命名为 <code>server.js</code> 或 <code>www</code> 是一种常见做法。这个文件负责创建服务器实例并将 Express 应用绑定到该服务器上。</li></ul></li><li><p><strong>路由和控制器</strong>：</p><ul><li>将路由逻辑和控制器函数分离到单独的文件或目录中，以保持代码的模块化和可维护性。</li></ul></li><li><p><strong>服务层和模型</strong>：</p><ul><li>对于复杂的应用逻辑和数据操作，考虑将业务逻辑抽象为服务层。服务层负责处理复杂的业务逻辑，并将数据库操作等业务逻辑从控制器中分离出来。</li></ul></li></ol><p>API声明应该在 app.js 文件里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(&quot;/api/events&quot;, events.API);</span><br><span class="line">app.use(&quot;/api/forms&quot;, forms);</span><br></pre></td></tr></table></figure><p>服务器网络声明，应该在 &#x2F;bin&#x2F;www 文件里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Get port from environment and store in Express.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &#x27;3000&#x27;);</span><br><span class="line">app.set(&#x27;port&#x27;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create HTTP server.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br></pre></td></tr></table></figure><p>使用超快的流行的测试包在线测试你的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/user&#x27;, function(req, res) &#123;</span><br><span class="line">  res.status(200).json(&#123; name: &#x27;tobi&#x27; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request(app)</span><br><span class="line">  .get(&#x27;/user&#x27;)</span><br><span class="line">  .expect(&#x27;Content-Type&#x27;, /json/)</span><br><span class="line">  .expect(&#x27;Content-Length&#x27;, &#x27;15&#x27;)</span><br><span class="line">  .expect(200)</span><br><span class="line">  .end(function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang多协程同步的三种方法</title>
      <link href="/2022/08/b2e5d1d4883a/"/>
      <url>/2022/08/b2e5d1d4883a/</url>
      
        <content type="html"><![CDATA[<p>在Golang中，可以使用以下三种常见方法来实现多协程的同步：</p><ol><li><strong>使用 WaitGroup</strong>:<br>使用 sync 包中的 WaitGroup 类型可以方便地实现对多个协程的同步管理。使用 Add 方法增加待等待的协程数量，使用 Done 方法标记协程执行完毕，最后调用 Wait 方法来等待所有协程执行完毕。示例如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(<span class="string">&quot;Goroutine&quot;</span>, i, <span class="string">&quot;done&quot;</span>)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;All goroutines done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用通道（Channel）</strong>:<br>通过通道可以在协程之间进行通信和同步。通过在通道上进行读写操作，可以控制协程的执行顺序。示例如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">&quot;Working...&quot;</span>)</span><br><span class="line">    <span class="comment">// 模拟工作</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> worker(done)</span><br><span class="line">    &lt;-done <span class="comment">// 阻塞直到接收到协程的完成通知</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;All done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用 Mutex（互斥锁）</strong>:<br>通过 sync 包中的 Mutex 类型可以实现对共享资源的安全访问，从而保证多个协程之间的同步。示例如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    lock    sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">    counter++</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> increment(&amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Counter:&quot;</span>, counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nest&quot;拦截器&quot;,&quot;验证器&quot;,&quot;中间件&quot;的区别</title>
      <link href="/2022/06/29f70be0c3d2/"/>
      <url>/2022/06/29f70be0c3d2/</url>
      
        <content type="html"><![CDATA[<p>在Nest.js中，拦截器(interceptor)、验证器(validator)和中间件(middleware)是三种不同的概念，它们分别用于不同的场景和目的。</p><ol><li><p>拦截器(interceptor)：</p><ul><li>拦截器用于在处理请求的过程中拦截和处理HTTP请求和响应。拦截器可以在处理请求之前或之后执行额外的逻辑。它可以修改请求、响应或异常的行为，从而实现对请求和响应的统一处理和控制。</li><li>示例：一个日志拦截器可以在处理请求之前和之后分别记录请求的信息和响应的结果，用于统一日志记录和跟踪。</li></ul></li><li><p>验证器(validator)：</p><ul><li>验证器通常用于验证用户提交的数据，例如表单数据、API请求参数等。在Nest.js中，可以使用类验证器(class-validator)库或自定义验证器来实现对数据的验证和校验，以确保数据的有效性和完整性。</li><li>示例：一个用户注册的验证器可以对用户提交的注册信息进行验证，包括邮箱格式、密码规则等。</li></ul></li><li><p>中间件(middleware)：</p><ul><li>中间件是一个函数，它可以在请求处理管道中执行额外的逻辑，例如身份验证、日志记录、错误处理等。中间件可以用于全局范围或特定路由范围的请求处理。</li><li>示例：一个身份验证中间件可以在处理请求之前验证用户的身份，并决定是否允许继续请求的处理。</li></ul></li></ol><h3 id="拦截器-interceptor-示例："><a href="#拦截器-interceptor-示例：" class="headerlink" title="拦截器(interceptor)示例："></a>拦截器(interceptor)示例：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestInterceptor</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">CallHandler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;</span><br><span class="line">  <span class="comment">// 实现intercept方法</span></span><br><span class="line">  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// 在处理请求之前输出日志</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before...&#x27;</span>);</span><br><span class="line">    <span class="comment">// 记录当前时间</span></span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 处理请求，并在处理完后输出日志，并返回结果</span></span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .<span class="title function_">handle</span>()</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 在处理请求后输出日志，并记录时间差</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>);</span><br><span class="line">          <span class="keyword">return</span> data; <span class="comment">// 返回处理后的数据</span></span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证器-validator-示例："><a href="#验证器-validator-示例：" class="headerlink" title="验证器(validator)示例："></a>验证器(validator)示例：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IsEmail</span>, <span class="title class_">IsNotEmpty</span>, <span class="title class_">MaxLength</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreateUserDto</span> &#123;</span><br><span class="line">  <span class="meta">@IsEmail</span>() <span class="comment">// 邮箱格式验证</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNotEmpty</span>() <span class="comment">// 不为空验证</span></span><br><span class="line">  <span class="meta">@MaxLength</span>(<span class="number">20</span>) <span class="comment">// 最大长度验证</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个用户注册信息的数据传输对象(DTO)，通过使用 class-validator 库中的装饰器对提交的数据进行验证，确保邮箱格式和密码规则的有效性。</p><h3 id="中间件-middleware-示例："><a href="#中间件-middleware-示例：" class="headerlink" title="中间件(middleware)示例："></a>中间件(middleware)示例：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggerMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="comment">// 实现 use 方法</span></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">    <span class="comment">// 在处理请求前输出日志</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request...&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">// 调用下一个中间件或路由处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是接口的幂等性和可重入？</title>
      <link href="/2022/05/bcd2f1b074f4/"/>
      <url>/2022/05/bcd2f1b074f4/</url>
      
        <content type="html"><![CDATA[<p>接口的幂等性和可重入是两个重要的概念，它们都涉及到对系统和接口的设计和实现具有重要意义。</p><ol><li><p><strong>幂等性</strong>：一个幂等操作指的是无论执行多少次，其结果都是一致的。在接口设计中，幂等性意味着无论对于同一请求的重复调用，都不会改变系统的状态或产生副作用。</p></li><li><p><strong>可重入</strong>：一个可重入的操作指的是可以在执行过程中被中断并重新开始，而不会影响操作的正确性。在接口设计中，可重入性指的是接口能够安全地在同时被多个线程或进程调用，而不会导致数据损坏或不一致。</p></li></ol><p>先看第一个示例，展示一个具有幂等性和可重入特性的接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这是一个银行账户服务的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccountService</span> &#123;</span><br><span class="line">    <span class="comment">// 存款操作，具有幂等性和可重入特性</span></span><br><span class="line">    <span class="title function_">deposit</span>(<span class="params">accountId, amount</span>) &#123;</span><br><span class="line">        <span class="comment">// 查询账户余额</span></span><br><span class="line">        <span class="keyword">const</span> currentBalance = <span class="variable language_">this</span>.<span class="title function_">queryBalance</span>(accountId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行存款操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateBalance</span>(accountId, currentBalance + amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询账户余额</span></span><br><span class="line">    <span class="title function_">queryBalance</span>(<span class="params">accountId</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟查询数据库或其他存储系统</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>; <span class="comment">// 假设返回账户余额为 100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新账户余额</span></span><br><span class="line">    <span class="title function_">updateBalance</span>(<span class="params">accountId, newBalance</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟更新数据库或其他存储系统中的账户余额</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>deposit</code> 方法实现了幂等性和可重入性。无论调用多少次 <code>deposit</code> 方法，只要给定相同的 <code>accountId</code> 和 <code>amount</code>，最终的账户余额都会是一致的，不会产生副作用。此外，即使在多个线程同时调用 <code>deposit</code> 方法，也不会导致数据不一致或损坏。</p><p>再看一个示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 幂等性的示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processOrder</span><span class="params">(orderID <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 根据订单号处理订单的逻辑</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Processing order %d\n&quot;</span>, orderID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无论调用多少次，对同一订单号的处理结果均一致，不会产生副作用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">processOrder(<span class="number">123</span>)</span><br><span class="line">processOrder(<span class="number">123</span>)</span><br><span class="line">processOrder(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可重入的示例</span></span><br><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可重入函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processData</span><span class="params">(data <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">mutex.Lock()</span><br><span class="line"><span class="comment">// 执行需要同步的代码段</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Processing data %d\n&quot;</span>, data)</span><br><span class="line">mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多个线程，并同时调用可重入函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">processData(<span class="number">1</span>)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">processData(<span class="number">2</span>)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>processOrder</code> 函数展示了幂等性的特点，无论对同一个订单号进行多少次处理，结果都是一致的，不会产生副作用。</p><p>而 <code>processData</code> 函数展示了可重入的特点，多个 goroutine 同时调用该函数时，由于使用了互斥锁进行同步，不会导致数据不一致或其他并发问题。</p><p>简而言之，就是要处理好数据的线程安全问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ts高级功能&quot;装饰器&quot;</title>
      <link href="/2022/04/fcdd2c3b9807/"/>
      <url>/2022/04/fcdd2c3b9807/</url>
      
        <content type="html"><![CDATA[<p>Typescript装饰器是一种特殊类型的声明，可以附加到类、方法、访问符、属性或参数上，通过装饰器可以对这些元素进行各种操作和修改。装饰器使用<code>@</code>符号，后跟一个函数或类，用来实现对类行为的改变。</p><h2 id="装饰器的用法"><a href="#装饰器的用法" class="headerlink" title="装饰器的用法"></a>装饰器的用法</h2><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>类装饰器是一个函数，它可以被附加到类构造函数上，用来监视、修改或替换类定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logClass</span>(<span class="params">target: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am a person&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><p>方法装饰器应用于一个类的方法属性描述符上，可以用来监视、修改或替换方法定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMethod</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; was called&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@logMethod</span></span><br><span class="line">    <span class="title function_">square</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>属性装饰器表达式在运行时被调用，可以用来监视、修改或替换类的属性定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logProperty</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; was called&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@logProperty</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器的原理"><a href="#装饰器的原理" class="headerlink" title="装饰器的原理"></a>装饰器的原理</h2><p>Typescript装饰器是基于ECMAScript 6的一个特性，它通过修改类的行为实现了细粒度的控制和修改。装饰器在编译期被调用，并通过装饰器工厂返回一个表达式函数，然后被应用到类、方法或属性上面。</p><p>装饰器原理涉及元编程的概念，通过装饰器可以动态修改或扩展类的行为。在应用装饰器时，装饰器工厂函数被调用并返回一个表达式函数，该函数在运行时被调用，从而实现对类行为的改变。</p><p>Typescript装饰器极大地提高了代码的可读性和维护性，同时也为开发者提供了更大的灵活性。装饰器是Typescript中一个非常强大且重要的特性，可以帮助开发者更好地管理和组织代码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象和面向过程的区别？</title>
      <link href="/2021/12/90926066c1e8/"/>
      <url>/2021/12/90926066c1e8/</url>
      
        <content type="html"><![CDATA[<p>面向对象编程（OOP）和面向过程编程（Procedural Programming）是两种不同的编程思想和范式。</p><h3 id="面向对象编程（OOP）"><a href="#面向对象编程（OOP）" class="headerlink" title="面向对象编程（OOP）"></a>面向对象编程（OOP）</h3><ul><li><p><strong>特点</strong>：</p><ul><li>将程序看作一组相互作用的对象，对象拥有属性（数据）和方法（行为）。</li><li>通过封装、继承和多态等概念来组织代码和数据，以提高可维护性和可重用性。</li></ul></li><li><p><strong>示例代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于面向对象编程思想的JavaScript示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Animal sound&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Woof!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDog.<span class="property">name</span>); <span class="comment">// 输出: Buddy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDog.<span class="title function_">makeSound</span>()); <span class="comment">// 输出: Woof!</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h3><ul><li><p><strong>特点</strong>：</p><ul><li>以一系列的步骤（过程）来解决问题，重点放在算法和函数上。</li><li>程序主要由函数构成，函数接受输入并产生输出。</li></ul></li><li><p><strong>示例代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于面向过程编程思想的JavaScript示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateArea</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circleArea = <span class="title function_">calculateArea</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(circleArea); <span class="comment">// 输出: 78.53981633974483</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><ol><li><p><strong>思想</strong>：</p><ul><li>面向对象编程强调对象的概念，数据和操作数据的方法被封装到对象中。</li><li>面向过程编程关注解决问题的步骤和流程，以函数为主。</li></ul></li><li><p><strong>抽象</strong>：</p><ul><li>面向对象编程使用类和对象来建模，支持封装、继承和多态等特性。</li><li>面向过程编程通常以线性的步骤来解决问题，没有对象和类的概念。</li></ul></li><li><p><strong>复用性</strong>：</p><ul><li>面向对象编程支持更好的代码复用性，因为可以通过继承和组合来重用代码。</li><li>面向过程编程通常缺乏结构化的代码复用机制。</li></ul></li></ol><p>总而言之，在实际项目中，可以根据具体需求和问题的特性来选择合适的编程范式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式和响应式的区别？</title>
      <link href="/2021/11/3a05595cbf71/"/>
      <url>/2021/11/3a05595cbf71/</url>
      
        <content type="html"><![CDATA[<p>函数式编程和响应式编程是两种不同的编程范式，它们有着不同的思维方式和实践方法。</p><h3 id="函数式编程（Functional-Programming）"><a href="#函数式编程（Functional-Programming）" class="headerlink" title="函数式编程（Functional Programming）"></a>函数式编程（Functional Programming）</h3><ul><li><p><strong>特点</strong>：</p><ul><li>强调函数的纯粹性和不可变性，鼓励使用纯函数（Pure Function）来处理数据。</li><li>注重数据转换和数据处理流程，倡导避免共享状态和可变数据，更多地依赖函数的组合和管道操作。</li></ul></li><li><p><strong>示例代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数式编程思想对数组进行处理</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用map函数对数组进行映射转换</span></span><br><span class="line"><span class="keyword">const</span> squaredNumbers = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(squaredNumbers); <span class="comment">// 输出: [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用reduce函数对数组进行累加求和</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, current</span>) =&gt;</span> acc + current, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="响应式编程（Reactive-Programming）"><a href="#响应式编程（Reactive-Programming）" class="headerlink" title="响应式编程（Reactive Programming）"></a>响应式编程（Reactive Programming）</h3><ul><li><p><strong>特点</strong>：</p><ul><li>响应式编程关注数据流和数据变化，通过订阅和监听数据流的改变来实现反应性。</li><li>常用的库如RxJS提供了Observables等工具来处理数据流，使得程序可以高效地响应数据的变化。</li></ul></li><li><p><strong>示例代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RxJS进行数据流处理</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">from</span> &#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> &#123; filter, map &#125; = rxjs.<span class="property">operators</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Operators进行数据流处理</span></span><br><span class="line">source.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>), <span class="comment">// 过滤偶数</span></span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * num) <span class="comment">// 对每个数求平方</span></span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)); <span class="comment">// 输出: 4, 16</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><ol><li><p><strong>思想</strong>：</p><ul><li>函数式编程侧重于数据转换和函数式组合，强调纯函数和不可变数据。</li><li>响应式编程侧重于数据流和数据的响应性，通过数据流的订阅和反应实现反应性。</li></ul></li><li><p><strong>重点</strong>：</p><ul><li>函数式编程着眼于数据和代码的转换处理，提倡函数的纯粹性和不可变性。</li><li>响应式编程更注重数据的流动和变化，以及对数据流的监听和处理。</li></ul></li><li><p><strong>工具</strong>：</p><ul><li>函数式编程可以利用函数式编程库（如Lodash、Ramda）来进行函数的组合和处理。</li><li>响应式编程常使用响应式编程库（如RxJS）来处理数据的流动和变化。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《代码整洁之道》学编程小技巧</title>
      <link href="/2021/07/05b038ec9e98/"/>
      <url>/2021/07/05b038ec9e98/</url>
      
        <content type="html"><![CDATA[<p>常见的代码整洁技巧：</p><ol><li><p><strong>命名规范</strong>：使用清晰、具有描述性的变量名、函数名和类名。避免缩写和模棱两可的命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的命名示例</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="number">5</span>; <span class="comment">// 避免使用单个字母的变量名</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;; <span class="comment">// 避免使用过于简单或者难以理解的函数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的命名示例</span></span><br><span class="line"><span class="keyword">const</span> daysInWeek = <span class="number">7</span>; <span class="comment">// 使用具有描述性的变量名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateAreaOfSquare</span>(<span class="params">length</span>) &#123;&#125; <span class="comment">// 使用描述性的函数名</span></span><br></pre></td></tr></table></figure></li><li><p><strong>减少函数的参数个数</strong>：尽量避免过多的函数参数，可以考虑将相关参数封装到对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过多的参数示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, gender, jobTitle, address</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象参数示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">personInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>避免过长的函数和类</strong>：尽量保持函数和类的简洁性和可读性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过长的函数示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">longFunctionWithManyTasks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分为多个简洁函数示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doTask1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doTask2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>避免深层嵌套</strong>：减少代码的嵌套层级，可以通过提前返回或提取出辅助函数来简化逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深层嵌套的示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">complexLogic</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减少嵌套的示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">complexLogic</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!c) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>代码注释</strong>：使用有意义的注释来解释复杂的逻辑或者提供上下文信息，避免无谓的注释或者注释中包含的与代码本身相悖的信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的注释示例</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>; <span class="comment">// 设置总数为0</span></span><br><span class="line"><span class="comment">// 迭代数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    total += arr[i]; <span class="comment">// 增加到总数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的注释示例</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>; <span class="comment">// 初始化总数</span></span><br><span class="line"><span class="comment">// 计算数组元素的总和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    total += arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>单一职责原则</strong>：确保每个函数、类或模块只负责一项功能或任务，避免功能耦合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不符合单一职责原则的示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 符合单一职责原则的示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>DRY 原则</strong>：避免重复代码。如果发现代码中存在相似的逻辑，可以考虑将其提取成函数、方法或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复代码的示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateRectangleArea</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> width * height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateSquareArea</span>(<span class="params">sideLength</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sideLength * sideLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵循DRY原则的示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateArea</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> width * height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>单元测试</strong>：编写单元测试来确保代码的正确性。编写可测试的代码也是代码整洁的一部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已编写的单元测试示例</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;calculateArea function should return the correct area&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">calculateArea</span>(<span class="number">3</span>, <span class="number">4</span>)).<span class="title function_">toBe</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">calculateArea</span>(<span class="number">5</span>, <span class="number">5</span>)).<span class="title function_">toBe</span>(<span class="number">25</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>拆分长表达式</strong>：避免写过长的表达式，可以拆分成多个命名的中间变量来提高可读性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过长的表达式示例</span></span><br><span class="line"><span class="keyword">const</span> result = (a * b + c) / (d - e) + (f * g);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分成中间变量的示例</span></span><br><span class="line"><span class="keyword">const</span> part1 = a * b + c;</span><br><span class="line"><span class="keyword">const</span> part2 = d - e;</span><br><span class="line"><span class="keyword">const</span> part3 = f * g;</span><br><span class="line"><span class="keyword">const</span> result = (part1 / part2) + part3;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
